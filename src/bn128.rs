use hex_literal::hex;
use revm_precompile::bn128::add::BYZANTIUM_ADD_GAS_COST;
use revm_precompile::bn128::mul::BYZANTIUM_MUL_GAS_COST;
use revm_precompile::bn128::pair::{BYZANTIUM_PAIR_BASE, BYZANTIUM_PAIR_PER_POINT};
use revm_precompile::bn128::{run_add, run_mul, run_pair};

const BN128_ADD_CASES: &[(&str, &[u8], &[u8])] = &[
    (
        "add 1",
        &hex!("18b18acfb4c2c30276db5411368e7185b311dd124691610c5d3b74034e093dc9063c909c4720840cb5134cb9f59fa749755796819658d32efc0d288198f3726607c2b7f58a84bd6145f00c9c2bc0bb1a187f20ff2c92963a88019e7c6a014eed06614e20c147e940f2d70da3f74c9a17df361706a4485c742bd6788478fa17d7"),
        &hex!("2243525c5efd4b9c3d3c45ac0ca3fe4dd85e830a4ce6b65fa1eeaee202839703301d1d33be6da8e509df21cc35964723180eed7532537db9ae5e7d48f195c915"),
    ),
    (
        "ethereum/tests/Addition on elliptic curve alt_bn128",
        &hex!("0f25929bcb43d5a57391564615c9e70a992b10eafa4db109709649cf48c50dd216da2f5cb6be7a0aa72c440c53c9bbdfec6c36c7d515536431b3a865468acbba1de49a4b0233273bba8146af82042d004f2085ec982397db0d97da17204cc2860217327ffc463919bef80cc166d09c6172639d8589799928761bcd9f22c903d4"),
        &hex!("1f4d1d80177b1377743d1901f70d7389be7f7a35a35bfd234a8aaee615b88c49018683193ae021a2f8920fed186cde5d9b1365116865281ccf884c1f28b1df8f"),
    ),
    (
        "zero sum",
        &hex!("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
        &hex!("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
    ),
    (
        "no input",
        b"",
        &hex!("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    )
];

const BN128_MUL_CASES: &[(&str, &[u8], &[u8])] = &[
    (
        "mul",
        &hex!("2bd3e6d0f3b142924f5ca7b49ce5b9d54c4703d7ae5648e61d02268b1a0a9fb721611ce0a6af85915e2f1d70300909ce2e49dfad4a4619c8390cae66cefdb20400000000000000000000000000000000000000000000000011138ce750fa15c2"),
        &hex!("070a8d6a982153cae4be29d434e8faef8a47b274a053f5a4ee2a6c9c13c31e5c031b8ce914eba3a9ffb989f9cdd5b0f01943074bf4f0f315690ec3cec6981afc"),
    ),
    (
        "ethereum/tests/Scalar multiplication on elliptic curve alt_bn128",
        &hex!("0f25929bcb43d5a57391564615c9e70a992b10eafa4db109709649cf48c50dd216da2f5cb6be7a0aa72c440c53c9bbdfec6c36c7d515536431b3a865468acbba0000000000000000000000000000000000000000000000000000000000000003"),
        &hex!("1f4d1d80177b1377743d1901f70d7389be7f7a35a35bfd234a8aaee615b88c49018683193ae021a2f8920fed186cde5d9b1365116865281ccf884c1f28b1df8f"),
    ),
    (
        "zero multiplication",
        &hex!("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000"),
        &hex!("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
    ),
    (
        "no input",
        b"",
        &hex!("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
    )
];

const BN128_PAIR_CASES: &[(&str, &[u8], &[u8])] = &[
    (
        "pair",
        &hex!("1c76476f4def4bb94541d57ebba1193381ffa7aa76ada664dd31c16024c43f593034dd2920f673e204fee2811c678745fc819b55d3e9d294e45c9b03a76aef41209dd15ebff5d46c4bd888e51a93cf99a7329636c63514396b4a452003a35bf704bf11ca01483bfa8b34b43561848d28905960114c8ac04049af4b6315a416782bb8324af6cfc93537a2ad1a445cfd0ca2a71acd7ac41fadbf933c2a51be344d120a2a4cf30c1bf9845f20c6fe39e07ea2cce61f0c9bb048165fe5e4de877550111e129f1cf1097710d41c4ac70fcdfa5ba2023c6ff1cbeac322de49d1b6df7c2032c61a830e3c17286de9462bf242fca2883585b93870a73853face6a6bf411198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa"),
        &hex!("0000000000000000000000000000000000000000000000000000000000000001"),
    ),
    (
        "ethereum/tests/Checking a pairing equation on curve alt_bn128",
        &hex!("1c76476f4def4bb94541d57ebba1193381ffa7aa76ada664dd31c16024c43f593034dd2920f673e204fee2811c678745fc819b55d3e9d294e45c9b03a76aef41209dd15ebff5d46c4bd888e51a93cf99a7329636c63514396b4a452003a35bf704bf11ca01483bfa8b34b43561848d28905960114c8ac04049af4b6315a416782bb8324af6cfc93537a2ad1a445cfd0ca2a71acd7ac41fadbf933c2a51be344d120a2a4cf30c1bf9845f20c6fe39e07ea2cce61f0c9bb048165fe5e4de877550111e129f1cf1097710d41c4ac70fcdfa5ba2023c6ff1cbeac322de49d1b6df7c2032c61a830e3c17286de9462bf242fca2883585b93870a73853face6a6bf411198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa"),
        &hex!("0000000000000000000000000000000000000000000000000000000000000001"),
    ),
    (
        "no input",
        b"",
        &hex!("0000000000000000000000000000000000000000000000000000000000000001")
    )
];

fn test_alt_bn128_add() {
    for (idx, (name, input, expected)) in BN128_ADD_CASES.iter().enumerate() {
        let outcome = run_add(&input, BYZANTIUM_ADD_GAS_COST, BYZANTIUM_ADD_GAS_COST).unwrap();
        assert_eq!(*outcome.bytes, *expected, "bn128_add#{}", name);
        println!("\tpass: bn128_add#{idx}[{name}]");
    }
}

fn test_alt_bn128_mul() {
    for (idx, (name, input, expected)) in BN128_MUL_CASES.iter().enumerate() {
        let outcome = run_mul(&input, BYZANTIUM_MUL_GAS_COST, BYZANTIUM_MUL_GAS_COST).unwrap();
        assert_eq!(*outcome.bytes, *expected, "bn128_mul#{}", name);
        println!("\tpass: bn128_mul#{idx}[{name}]");
    }
}

fn test_alt_bn128_pair() {
    for (idx, (name, input, expected)) in BN128_PAIR_CASES.iter().enumerate() {
        let outcome = run_pair(
            &input,
            BYZANTIUM_PAIR_PER_POINT,
            BYZANTIUM_PAIR_BASE,
            260_000,
        )
        .unwrap();
        assert_eq!(*outcome.bytes, *expected, "bn128_pair#{}", name);
        println!("\tpass: bn128_pair#{idx}[{name}]");
    }
}

pub fn test_all() {
    println!("bn128 test:");
    test_alt_bn128_add();
    test_alt_bn128_mul();
    test_alt_bn128_pair();
    println!("bn128 test done");
}
